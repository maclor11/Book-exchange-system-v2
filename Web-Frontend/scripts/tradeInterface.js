// Funkcja inicjalizujÄ…ca modal wymiany
function initTradeModal() {
    // SprawdÅº czy modal juÅ¼ istnieje
    if (document.getElementById('tradeModal')) return;
    
    // UtwÃ³rz HTML dla modalu wymiany
    const modalHTML = `
        <div id="tradeModal" class="modal">
            <div class="modal-content trade-modal-content">
                <span class="close-trade">&times;</span>
                <h2>Wymiana ksiÄ…Å¼ek</h2>
                
                <div class="trade-users-info">
                    <div class="trade-user-info">
                        <h3>Twoje ksiÄ…Å¼ki</h3>
                        <span id="currentUserName"></span>
                    </div>
                    <div class="trade-user-info">
                        <h3>KsiÄ…Å¼ki partnera</h3>
                        <span id="partnerUserName"></span>
                    </div>
                </div>
                
                <div class="trade-books-container">
                    <!-- Twoje ksiÄ…Å¼ki -->
                    <div class="trade-section">
                        <h4>Wybierz swoje ksiÄ…Å¼ki do wymiany:</h4>
                        <div id="myBooksForTrade" class="trade-books-list">
                            <!-- Lista twoich ksiÄ…Å¼ek -->
                        </div>
                        <h4>Wybrane twoje ksiÄ…Å¼ki:</h4>
                        <div id="selectedMyBooks" class="selected-books">
                            <!-- Wybrane twoje ksiÄ…Å¼ki -->
                        </div>
                    </div>
                    
                    <!-- KsiÄ…Å¼ki partnera -->
                    <div class="trade-section">
                        <h4>Wybierz ksiÄ…Å¼ki partnera:</h4>
                        <div id="partnerBooksForTrade" class="trade-books-list">
                            <!-- Lista ksiÄ…Å¼ek partnera -->
                        </div>
                        <h4>Wybrane ksiÄ…Å¼ki partnera:</h4>
                        <div id="selectedPartnerBooks" class="selected-books">
                            <!-- Wybrane ksiÄ…Å¼ki partnera -->
                        </div>
                    </div>
                </div>
                
                <div class="trade-actions">
                    <button id="submitTradeBtn" class="primary">ZÅ‚Ã³Å¼ ofertÄ™ wymiany</button>
                    <button id="cancelTradeBtn" class="secondary">Anuluj</button>
                </div>
            </div>
        </div>
    `;
    
    // Dodaj modal do body
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    
    // Przypisz event listenery
    setupTradeModalListeners();
}

// Funkcja ustawiajÄ…ca listenery dla modalu wymiany
function setupTradeModalListeners() {
    const modal = document.getElementById('tradeModal');
    const closeBtn = document.querySelector('.close-trade');
    const submitBtn = document.getElementById('submitTradeBtn');
    const cancelBtn = document.getElementById('cancelTradeBtn');
    
    // Zamykanie modalu
    closeBtn.addEventListener('click', closeTradeModal);
    cancelBtn.addEventListener('click', closeTradeModal);
    
    // Zamykanie po klikniÄ™ciu poza modal
    window.addEventListener('click', (event) => {
        if (event.target === modal) {
            closeTradeModal();
        }
    });
}

// Funkcja otwierajÄ…ca modal wymiany z konkretnÄ… ksiÄ…Å¼kÄ…
async function openTradeModal(bookId, partnerUsername) {
    initTradeModal();
    
    const modal = document.getElementById('tradeModal');
    const currentUserName = document.getElementById('currentUserName');
    const partnerUserName = document.getElementById('partnerUserName');
    const submitBtn = document.getElementById('submitTradeBtn');
    
    // Resetuj modal do stanu tworzenia nowej wymiany
    modal.querySelector('h2').textContent = 'Wymiana ksiÄ…Å¼ek';
    submitBtn.textContent = 'ZÅ‚Ã³Å¼ ofertÄ™ wymiany';
    submitBtn.onclick = submitTrade; // Ustaw na tworzenie nowej wymiany
    
    // Ustaw dane uÅ¼ytkownikÃ³w
    const userData = await getCurrentUser();
    currentUserName.textContent = userData.username;
    partnerUserName.textContent = partnerUsername;
    
    // ZaÅ‚aduj ksiÄ…Å¼ki
    await loadBooksForTrade(userData.username, partnerUsername);
    
    // Automatycznie wybierz ksiÄ…Å¼kÄ™ partnera, ktÃ³ra zostaÅ‚a klikniÄ™ta
    if (bookId) {
        selectPartnerBook(bookId);
    }
    
    modal.style.display = 'block';
}

// Funkcja Å‚adujÄ…ca ksiÄ…Å¼ki dla wymiany
async function loadBooksForTrade(currentUsername, partnerUsername) {
    try {
        // ZaÅ‚aduj swoje ksiÄ…Å¼ki
        const myBooksResponse = await callApi('/api/user/books');
        if (myBooksResponse.ok) {
            const myBooks = await myBooksResponse.json();
            displayMyBooksForTrade(myBooks);
        } else {
            console.error('BÅ‚Ä…d podczas Å‚adowania wÅ‚asnych ksiÄ…Å¼ek');
        }
        
        // ZaÅ‚aduj ksiÄ…Å¼ki partnera - UÅ»YWAJ callApi zamiast fetch
        const partnerBooksResponse = await callApi(`/api/user/books/${encodeURIComponent(partnerUsername)}`);
        if (partnerBooksResponse.ok) {
            const partnerBooks = await partnerBooksResponse.json();
            displayPartnerBooksForTrade(partnerBooks);
        } else {
            console.error('BÅ‚Ä…d podczas Å‚adowania ksiÄ…Å¼ek partnera');
            // WyÅ›wietl komunikat uÅ¼ytkownikowi
            const container = document.getElementById('partnerBooksForTrade');
            if (container) {
                container.innerHTML = '<div class="error-message">Nie udaÅ‚o siÄ™ zaÅ‚adowaÄ‡ ksiÄ…Å¼ek partnera</div>';
            }
        }
        
    } catch (error) {
        console.error('BÅ‚Ä…d podczas Å‚adowania ksiÄ…Å¼ek do wymiany:', error);
        alert('Nie udaÅ‚o siÄ™ zaÅ‚adowaÄ‡ ksiÄ…Å¼ek do wymiany');
    }
}

// Funkcja wyÅ›wietlajÄ…ca twoje ksiÄ…Å¼ki
function displayMyBooksForTrade(books) {
    const container = document.getElementById('myBooksForTrade');
    container.innerHTML = '';
    
    books.forEach(book => {
        const bookElement = createTradeBookElement(book, 'my');
        container.appendChild(bookElement);
    });
}

// Funkcja wyÅ›wietlajÄ…ca ksiÄ…Å¼ki partnera
function displayPartnerBooksForTrade(books) {
    const container = document.getElementById('partnerBooksForTrade');
    container.innerHTML = '';
    
    books.forEach(book => {
        const bookElement = createTradeBookElement(book, 'partner');
        container.appendChild(bookElement);
    });
}

// Funkcja tworzÄ…ca element ksiÄ…Å¼ki do wymiany
function createTradeBookElement(book, type) {
    const bookDiv = document.createElement('div');
    bookDiv.className = 'trade-book-item';
    bookDiv.dataset.bookId = book.id;
    bookDiv.dataset.type = type;
    
    // SprawdÅº czy ksiÄ…Å¼ka jest zablokowana
    const isLocked = book.is_locked || false;
    if (isLocked) {
        bookDiv.classList.add('book-locked');
    }
    
    const buttonText = isLocked ? 'NiedostÄ™pna' : 'Wybierz';
    const buttonDisabled = isLocked ? 'disabled' : '';
    const lockIcon = isLocked ? '<span class="lock-icon">ðŸ”’</span>' : '';
    
    bookDiv.innerHTML = `
        <div class="book-info">
            ${lockIcon}
            <h5>${escapeHtml(book.title)}</h5>
            <p>Autor: ${escapeHtml(book.author)}</p>
            <p>Stan: ${escapeHtml(book.condition)}</p>
            <p>OkÅ‚adka: ${escapeHtml(book.cover_type)}</p>
            ${isLocked ? '<p class="lock-message">KsiÄ…Å¼ka jest zablokowana przez innÄ… wymianÄ™</p>' : ''}
        </div>
        <button class="select-book-btn" onclick="toggleBookSelection('${book.id}', '${type}')" ${buttonDisabled}>
            ${buttonText}
        </button>
    `;
    
    return bookDiv;
}

// Funkcja przeÅ‚Ä…czajÄ…ca wybÃ³r ksiÄ…Å¼ki
function toggleBookSelection(bookId, type) {
    const bookElement = document.querySelector(`[data-book-id="${bookId}"][data-type="${type}"]`);
    const button = bookElement.querySelector('.select-book-btn');
    
    // SprawdÅº czy ksiÄ…Å¼ka jest zablokowana
    if (bookElement.classList.contains('book-locked')) {
        return; // Nie pozwÃ³l na wybÃ³r zablokowanej ksiÄ…Å¼ki
    }
    
    if (bookElement.classList.contains('selected')) {
        // UsuÅ„ z wybranych
        bookElement.classList.remove('selected');
        button.textContent = 'Wybierz';
        removeSelectedBook(bookId, type);
    } else {
        // Dodaj do wybranych
        bookElement.classList.add('selected');
        button.textContent = 'UsuÅ„';
        addSelectedBook(bookId, type, bookElement);
    }
}

// Funkcja dodajÄ…ca ksiÄ…Å¼kÄ™ do wybranych
function addSelectedBook(bookId, type, bookElement) {
    const containerId = type === 'my' ? 'selectedMyBooks' : 'selectedPartnerBooks';
    const container = document.getElementById(containerId);
    
    const selectedBookDiv = document.createElement('div');
    selectedBookDiv.className = 'selected-book-item';
    selectedBookDiv.dataset.bookId = bookId;
    selectedBookDiv.dataset.type = type;
    
    const bookInfo = bookElement.querySelector('.book-info').cloneNode(true);
    const removeBtn = document.createElement('button');
    removeBtn.className = 'remove-selected-btn';
    removeBtn.textContent = 'âœ•';
    removeBtn.onclick = () => toggleBookSelection(bookId, type);
    
    selectedBookDiv.appendChild(bookInfo);
    selectedBookDiv.appendChild(removeBtn);
    container.appendChild(selectedBookDiv);
}

// Funkcja usuwajÄ…ca ksiÄ…Å¼kÄ™ z wybranych
function removeSelectedBook(bookId, type) {
    const containerId = type === 'my' ? 'selectedMyBooks' : 'selectedPartnerBooks';
    const container = document.getElementById(containerId);
    const selectedBook = container.querySelector(`[data-book-id="${bookId}"]`);
    
    if (selectedBook) {
        selectedBook.remove();
    }
}

// Funkcja automatycznie wybierajÄ…ca ksiÄ…Å¼kÄ™ partnera
function selectPartnerBook(bookId) {
    // Poczekaj chwilÄ™ na zaÅ‚adowanie ksiÄ…Å¼ek
    setTimeout(() => {
        toggleBookSelection(bookId, 'partner');
    }, 500);
}

// Funkcja zamykajÄ…ca modal wymiany
function closeTradeModal() {
    const modal = document.getElementById('tradeModal');
    modal.style.display = 'none';
    
    // WyczyÅ›Ä‡ wybrane ksiÄ…Å¼ki
    document.getElementById('selectedMyBooks').innerHTML = '';
    document.getElementById('selectedPartnerBooks').innerHTML = '';
    
    // UsuÅ„ klasy selected z wszystkich ksiÄ…Å¼ek
    document.querySelectorAll('.trade-book-item.selected').forEach(item => {
        item.classList.remove('selected');
        const btn = item.querySelector('.select-book-btn');
        if (btn) btn.textContent = 'Wybierz';
    });
}

// Funkcja wysyÅ‚ajÄ…ca ofertÄ™ wymiany
async function submitTrade() {
    const selectedMyBooks = Array.from(document.querySelectorAll('#selectedMyBooks .selected-book-item'))
        .map(book => book.dataset.bookId);
    
    const selectedPartnerBooks = Array.from(document.querySelectorAll('#selectedPartnerBooks .selected-book-item'))
        .map(book => book.dataset.bookId);
    
    const partnerUsername = document.getElementById('partnerUserName').textContent;
    
    if (selectedMyBooks.length === 0 || selectedPartnerBooks.length === 0) {
		alert('Musisz wybraÄ‡ przynajmniej jednÄ… ksiÄ…Å¼kÄ™ z kaÅ¼dej strony do wymiany');
		return;
	}
    
    try {
        const response = await callApi('/api/user/trades', {
            method: 'POST',
            body: JSON.stringify({
                user2_id: partnerUsername,
                user1_books: selectedMyBooks,
                user2_books: selectedPartnerBooks
            })
        });
        
        if (response.ok) {
            const result = await response.json();
            alert('Oferta wymiany zostaÅ‚a wysÅ‚ana!');
            closeTradeModal();
            
            // OdÅ›wieÅ¼ listÄ™ wymian jeÅ›li jesteÅ›my na profilu
            if (typeof loadUserTrades === 'function') {
                loadUserTrades();
            }
        } else {
            const error = await response.json();
            alert(error.error || 'WystÄ…piÅ‚ bÅ‚Ä…d podczas tworzenia wymiany');
        }
        
    } catch (error) {
        console.error('BÅ‚Ä…d podczas tworzenia wymiany:', error);
        alert('Problem z poÅ‚Ä…czeniem z serwerem');
    }
}

// Funkcja pomocnicza do pobierania danych aktualnego uÅ¼ytkownika
async function getCurrentUser() {
    try {
        const response = await callApi('/api/me');
        if (response.ok) {
            return await response.json();
        }
    } catch (error) {
        console.error('BÅ‚Ä…d podczas pobierania danych uÅ¼ytkownika:', error);
    }
    return { username: 'Nieznany' };
}

// Funkcja pomocnicza do escapowania HTML
function escapeHtml(unsafe) {
    return unsafe
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}